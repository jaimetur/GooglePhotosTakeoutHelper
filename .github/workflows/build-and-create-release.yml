name: ‚ñ∂Ô∏è Build Binaries and Create Release

on:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1) Manual trigger from GitHub Actions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  workflow_dispatch:
    inputs:
      final_release:
        description: "Is this a Final Release?"
        required: true
        default: false
        type: boolean
      linux_x64:
        description: "Include linux-x64 ?"
        type: boolean
        required: true
        default: true
      macos_x64:
        description: "Include macos-x64 ?"
        type: boolean
        required: true
        default: true
      windows_x64:
        description: "Include windows-x64 ?"
        type: boolean
        required: true
        default: true
      linux_arm64:
        description: "Include linux-arm64 ?"
        type: boolean
        required: true
        default: true
      macos_arm64:
        description: "Include macos-arm64 ?"
        type: boolean
        required: true
        default: true
      windows_arm64:
        description: "Include windows-arm64 ?"
        type: boolean
        required: true
        default: true

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2) Automatic trigger by push ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  #  push:                   # Execute after push on mmaster, except on path-ignore
  #    branches:
  #      - master
  #    paths-ignore:
  #      - .gitignore
  #      - .idea/**

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3) Scheduled trigger by cron ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  #  schedule:
  #    - cron: '0 2 * * *' # Ejecuci√≥n diaria a las 2 AM UTC
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


jobs:
  # ==========================================================================================================================
  # JOB Set Input Matrix
  # ==========================================================================================================================
  set-input-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - id: matrix
        run: |
          echo "‚öôÔ∏è Generating dynamic matrix..."

          EVENT_NAME="${{ github.event_name }}"

          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "üîò Disparo manual con inputs"
            linux_x64=${{ toJSON(github.event.inputs.linux_x64) }}
            linux_arm64=${{ toJSON(github.event.inputs.linux_arm64) }}
            macos_x64=${{ toJSON(github.event.inputs.macos_x64) }}
            macos_arm64=${{ toJSON(github.event.inputs.macos_arm64) }}
            windows_x64=${{ toJSON(github.event.inputs.windows_x64) }}
            windows_arm64=${{ toJSON(github.event.inputs.windows_arm64) }}

          else
            echo "‚è∞ Scheduled trigger (cron) or üì¶ Per commit trigger"
            linux_x64="true"
            linux_arm64="true"
            macos_x64="true"
            macos_arm64="true"
            windows_x64="true"
            windows_arm64="true"
          fi

          # Crear lista
          OS_LIST=()
          [ "$linux_x64" = "true" ] && OS_LIST+=("linux-x64")
          [ "$linux_arm64" = "true" ] && OS_LIST+=("linux-arm64")
          [ "$macos_x64" = "true" ] && OS_LIST+=("macos-x64")
          [ "$macos_arm64" = "true" ] && OS_LIST+=("macos-arm64")
          [ "$windows_x64" = "true" ] && OS_LIST+=("windows-x64")
          [ "$windows_arm64" = "true" ] && OS_LIST+=("windows-arm64")

          if [ ${#OS_LIST[@]} -eq 0 ]; then
            echo "‚ùå No OS selected"
            exit 1
          fi

          # Converts to real and clean JSON array
          OS_JSON=$(printf '%s\n' "${OS_LIST[@]}" | jq -R . | jq -s .)

          # Build final compact JSON
          MATRIX=$(jq -nc \
            --argjson os "${OS_JSON}" \
            --arg compiler ${compiler} \
            --arg compilation_mode ${compilation_mode} \
            --arg build_mode ${build_mode} \
            --arg python ${python} \
            '{os: $os, compiler: [$compiler], compilation_mode: [$compilation_mode], build_mode: [$build_mode], python: [$python]}')

          echo "‚úÖ Generated Matrix:"
          echo "$MATRIX"
          echo ""
          echo "üìã Inputs:"
          echo "  üèÅ Final-Release    : ${{ github.event.inputs.final_release }}"
          echo "  üåø Branch           : ${{ github.ref_name }}"
          echo "  üì¶ OS               : $(echo "$MATRIX" | jq -r '.os | join(", ")')"

          # Export a single line (mandatory)
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"


  # ==========================================================================================================================
  # JOB build
  # ==========================================================================================================================
  build-binaries:
    name: ‚ñ∂Ô∏è Build Binaries
    # Different VM images to compile in all SO and all Archs according to:
    # https://github.com/actions/runner-images
    # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    needs: set-input-matrix
    strategy:
      matrix: ${{ fromJson(needs.set-input-matrix.outputs.matrix) }}
        # os: [ linux-x64, linux-arm64, macos-x64, macos-arm64, windows-x64, windows-arm64 ]
        # compiler: [ "${{ github.event.inputs.compiler }}" ] # possible values: [pyinstaller, nuitka]
        # mode: [ "${{ github.event.inputs.mode }}" ] # possible values: [default, custom]
        # python: [ "${{ github.event.inputs.python }}"] # select Python version

    # runs-on: ${{ matrix.os }}
    # latest linux-x64: ubuntu-latest
    # latest linux-arm64: ubuntu-24.04-arm
    runs-on: ${{ fromJson('{
      "linux-x64":"ubuntu-22.04", 
      "linux-arm64":"ubuntu-22.04-arm",
      "macos-x64":"macos-13",
      "macos-arm64":"macos-latest",
      "windows-x64":"windows-latest",
      "windows-arm64":"windows-11-arm"}')
      [matrix.os] }}

    steps:
      - name: üîç Show environment configuration
        shell: bash
        run: |
          echo ""
          echo "üéØ Event that triggered this workflow: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "‚úÖ Manually triggered by a user from the interface"
          else
            echo "ü§ñ Automatically triggered (by push or cron)"
          fi
          echo ""
          echo "üì¶ Target OS         : ${{ matrix.os }}"
          echo ""
          echo "OS        : ${{ runner.os }}"
          echo "Arch      : ${{ runner.arch }}"

#      # Checkout Repository
#      - name: üßæ Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.TOKEN_GITHUB }}

      - uses: actions/checkout@v4.2.2
      - uses: dart-lang/setup-dart@v1.7.1
      - run: dart pub get

      - name: üè∑Ô∏è Extract TOOL_VERSION
        id: version
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == *"windows"* ]]; then
          VERSION=$(powershell -Command "(Get-Content pubspec.yaml | Select-String '^version:').ToString().Split(':')[1].Trim()")
          else
          VERSION=$(grep '^version:' pubspec.yaml | head -n1 | cut -d' ' -f2)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: ‚ñ∂Ô∏è Build Binaries
        id: build_exe
        shell: bash
        run: |
          version=${{ steps.version.outputs.version }}
          osname=${{ matrix.os }}
          # Normalize osname and append arch for output file
          if [[ "${{ matrix.os }}" == "linux-x64" ]]; then
            osname=linux-x86_64
          elif [[ "${{ matrix.os }}" == "linux-arm64" ]]; then
            osname=linux-arm64
          elif [[ "${{ matrix.os }}" == "macos-arm64" ]]; then
            osname=macos-arm64
          elif [[ "${{ matrix.os }}" == "windows-x64" ]]; then
            osname=macos-x86_64
          elif [[ "${{ matrix.os }}" == "windows-64" ]]; then
            osname=windows-x86_64
          elif [[ "${{ matrix.os }}" == "windows-arm64" ]]; then
            osname=windows-arm64
          fi
          outname=gpth-v$version-$osname
          if [[ "$osname" == windows-* ]]; then
            outname="$outname.exe"
          fi
          echo "outname=$outname" >> $GITHUB_OUTPUT
          dart compile exe bin/gpth.dart -o ./$outname

      - name: ‚¨ÜÔ∏è Upload binaries as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.version.outputs.version }}-${{ steps.build_exe.outputs.outname }}
          path: ./${{ steps.build_exe.outputs.outname }}
          if-no-files-found: error

      - name: Get changelog
        run: python scripts/get_changelog.py --version ${{ steps.version.outputs.version }} > ./RELEASE-NOTES.ms

      - name: ‚¨ÜÔ∏è Upload RELEASE-NOTES.md as artifact
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: RELEASE-NOTES.md
          path: RELEASE-NOTES.md
          overwrite: true

#      - name: üè∑Ô∏è Create GH-Release
#        uses: softprops/action-gh-release@v2.2.2
#        with:
#          body_path: ./RELEASE-NOTES.ms
#          fail_on_unmatched_files: true


  # ==========================================================================================================================
  # JOB Create Release
  # ==========================================================================================================================
  create-release:
    name: üè∑Ô∏è Create GH-Release
    needs:
      - build-binaries

    runs-on: ubuntu-22.04

    outputs:
      tool_version: ${{ steps.extract_version.outputs.tool_version }}

    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v4

      - name: ‚úÖ Check Final-Release
        run: |
          echo "Final-Release: ${{ inputs.final_release }}"

      - name: üè∑Ô∏è Extract TOOL_VERSION from GlobalVariables.py
        id: extract_version                   # Importante a√±adir el ID para que outputs pueda encontrar la variable
        run: |
          # 1Ô∏è‚É£ Obtenemos el valor sin la ‚Äúv‚Äù
          if [[ "${{ matrix.os }}" == *"windows"* ]]; then
          TOOL_VERSION=$(powershell -Command "(Get-Content pubspec.yaml | Select-String '^version:').ToString().Split(':')[1].Trim()")
          else
          TOOL_VERSION=$(grep '^version:' pubspec.yaml | head -n1 | cut -d' ' -f2)
          fi

          # 2Ô∏è‚É£ Lo ponemos en el entorno de los siguientes steps (opcional)
          echo "TOOL_VERSION=${TOOL_VERSION}" >> "$GITHUB_ENV"
          
          # 3Ô∏è‚É£ Creamos la salida del step
          echo "tool_version=${TOOL_VERSION}" >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ TOOL_VERSION = ${TOOL_VERSION}"

      - name: üßº Delete GitHub release, tag and associated discussion (only for stable releases)
        run: |
          set -e
          TAG="v${{ env.TOOL_VERSION }}"
          REPO="${{ github.repository }}"
          EXIT_CODE=0
      
          # Get release info safely
          RELEASE_INFO=$(gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null || echo "")
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')
          
          # Check for existing releasess/discussions with RELEASE_ID associated to TAG
          echo "üîç Checking for existing discussion ID with tag $TAG..."
          if [[ -n "$RELEASE_ID" ]]; then
            echo "üóë Discussion ID $RELEASE_ID exists associated with tag $TAG . Deleting it (discussion will also be removed)..."
            gh api -X DELETE "repos/$REPO/releases/$RELEASE_ID"
            echo "‚úÖ Release ID $RELEASE_ID successfully deleted."
          else
            echo "‚úÖ No discussion was found for tag $TAG"
          fi
          
          # Check if release exists and delete it
          echo "üîç Checking for existing release with tag $TAG..."
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" &> /dev/null; then
            echo "üóë Release $TAG exists. Deleting it..."
            gh release delete "$TAG" --repo "$GITHUB_REPOSITORY" --yes
            echo "‚úÖ Release $TAG successfully deleted."
          else
            echo "‚úÖ Release $TAG does not exist."
          fi
      
          # Check if remote tag exists and delete it
          echo "üîç Checking for remote tag $TAG..."
          if git ls-remote --tags origin | grep "refs/tags/$TAG" &> /dev/null; then
            echo "üóë Remote tag $TAG exists. Deleting it..."
            git push --delete origin "$TAG" || EXIT_CODE=1
            echo "‚úÖ Remote tag $TAG successfully deleted."
          else
            echo "‚úÖ Remote tag $TAG does not exist"
          fi
          
          # Check if local tag exists and delete it
          echo "üîç Checking for local tag $TAG..."
          if git tag | grep -q "$TAG"; then
            echo "üóë Local tag $TAG exists. Deleting it..."
            git tag -d "$TAG"
            echo "‚úÖ Local tag $TAG successfully deleted."
          else
            echo "‚úÖ Local tag $TAG does not exist"
          fi

          # VERIFICATIONS...
          echo ""
          echo "‚úÖ Verifying cleanup..."
      
          # Retry-based verification of release deletion
          if gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null; then
            echo "‚ö†Ô∏è Release still exists after deletion. Retrying in 5s..."
            sleep 5
            if gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null; then
              echo "‚ùå Release still exists after retry."
              EXIT_CODE=1
            else
              echo "‚úÖ Release deleted after retry."
            fi
          else
            echo "‚úÖ Release deleted."
          fi
      
          # Final verification of tag deletion
          if git ls-remote --tags origin | grep "refs/tags/$TAG" &> /dev/null; then
            echo "‚ùå Remote tag still exists after deletion."
            EXIT_CODE=1
          else
            echo "‚úÖ Remote tag deleted."
          fi
      
          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "‚ùå Cleanup failed. Aborting workflow."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      - name: üì• Download Artifacts (Binaries Zips)
        uses: actions/download-artifact@v4
        with:
          pattern: gpth*.zip
          path: ./release_files
          merge-multiple: true

      - name: üìù Download RELEASE-NOTES.md
        uses: actions/download-artifact@v4
        with:
          name: RELEASE-NOTES.md
          path: .

      # Confirmar contenido descargado
      - name: üìÇ List downloaded files
        run: |
          ls -lh ./release_files/
          sha256sum ./release_files/*

      # üöÄ Crear release estable (final_release == true)
      - name: üöÄ Create GitHub Release (stable)
        if: ${{ inputs.final_release == true }}
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: v${{ env.TOOL_VERSION }}
          name: v${{ env.TOOL_VERSION }}
          # target_commitish: main
          discussion_category_name: Announcements
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          body_path: RELEASE-NOTES.md
          files: |
            ./release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # üöÄ Crear prerelease (final_release == false)
      - name: üöÄ Create GitHub Release (prerelease)
        if: ${{ inputs.final_release == false }}
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: v${{ env.TOOL_VERSION }}
          name: v${{ env.TOOL_VERSION }}
          # target_commitish: main
          # discussion_category_name: Announcements  # Descomenta si tambi√©n quieres discusi√≥n en prerelease
          draft: false
          prerelease: true
          generate_release_notes: true
          body_path: RELEASE-NOTES.md
          files: |
            ./release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

